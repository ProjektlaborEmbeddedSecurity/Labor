pragma solidity ^0.4.2;
contract ScissorsPaperRock {

    address private player1 = 0;
    bytes32 private value_player1 = sha3("");
    
    address private player2 = 0;
    bytes32 private value_player2 = sha3("");
    
    bytes32 private rock = sha3("rock");
    bytes32 private scissors = sha3("scissors");
    bytes32 private paper = sha3("paper");
    

    function ScissorsPaperRock() {
        
    }

    event Winner(address winner);

    function play(string value)
    {
        bytes32 hashedValue = sha3(value);
        if(hashedValue != rock && hashedValue != scissors && hashedValue != paper)
        {
            throw;
        }
        if(player1 == 0)
        {
            player1 = msg.sender;
            value_player1 = hashedValue;
        }
        else if(player2 == 0)
        {
            player2 = msg.sender;
            value_player2 = hashedValue;
            //Funktionsaufruf Auswertung
            address winner = checkWinner();
            
            if(winner != 0)
            {
                //string winnerAddress = toString(winner);
                //string result = strConcat(winnerAddress, " is the winner's address.");
                
                //Gewinner k√ºren
                //Result(result);
                Winner(winner);
            }
            else
            {
                //Unentschieden
                Winner(0);
            }
        }
    }

    function checkWinner() returns (address)
    {
        address winner = 0;
        
        //Player 1 spielt Schere
        if(value_player1 == scissors)   
        {
            if(value_player2 == scissors)
            {
                //Draw   
            }
            else if(value_player2 == rock)
            {
                //Winner Player 2
                winner = player2;
            }
            else if(value_player2 == paper)
            {
                //Winner Player 1
                winner = player1;
            }
        }
        else if(value_player1 == rock)
        {
            if(value_player2 == scissors)
            {
                //Winner Player 1   
                winner = player1;
            }
            else if(value_player2 == rock)
            {
                //Draw
            }
            else if(value_player2 == paper)
            {
                //Winner Player 2
                winner = player2;
            }
        }
        else if(value_player1 == paper)
        {
            if(value_player2 == scissors)
            {
                //Winner Player 2   
                winner = player2;
            }
            else if(value_player2 == rock)
            {
                //Winner Player 1
                winner = player1;
            }
            else if(value_player2 == paper)
            {
                //Draw
            }
        }
        return winner;
    }
    
    function toString(address x) returns (string) {
        bytes memory b = new bytes(20);
        for (uint i = 0; i < 20; i++)
            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));
        return string(b);
    }
    
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string)
    {
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        bytes memory _bc = bytes(_c);
        bytes memory _bd = bytes(_d);
        bytes memory _be = bytes(_e);
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);
        bytes memory babcde = bytes(abcde);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];
        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];
        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];
        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];
        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];
        return string(babcde);
    }

    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {
        return strConcat(_a, _b, _c, _d, "");
    }

    function strConcat(string _a, string _b, string _c) internal returns (string) {
        return strConcat(_a, _b, _c, "", "");
    }

    function strConcat(string _a, string _b) internal returns (string) {
        return strConcat(_a, _b, "", "", "");
}
}
